/* tslint:disable */
/* eslint-disable */
/**
 * Delicious Fruit API
 * The API you should use instead of throwing your monitor out the window
 *
 * OpenAPI spec version: 1.0.0-rc.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { APIError } from '../models';
import { InlineResponse2001 } from '../models';
import { Review } from '../models';
/**
 * ReviewsApi - axios parameter creator
 * @export
 */
export const ReviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unlike Review (User/Admin Only)
         * @summary Unlike Review (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReviewLike: async (authorization: string, id: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteReviewLike.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteReviewLike.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteReviewLike.');
            }
            const localVarPath = `/reviews/{id}/likes/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Reviews for Game
         * @summary Get Reviews for Game
         * @param {number} id 
         * @param {number} [byUserId] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [textReviewsFirst] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameReviews: async (id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameReviews.');
            }
            const localVarPath = `/games/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (byUserId !== undefined) {
                localVarQueryParameter['byUserId'] = byUserId;
            }

            if (includeOwnerReview !== undefined) {
                localVarQueryParameter['includeOwnerReview'] = includeOwnerReview;
            }

            if (textReviewsFirst !== undefined) {
                localVarQueryParameter['textReviewsFirst'] = textReviewsFirst;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Review
         * @summary Get Review
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReview.');
            }
            const localVarPath = `/reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Review Count
         * @summary Get Review Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reviews/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns whether a user likes a specific review. (User/Admin Only)
         * @summary Like Check for User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviewLike: async (authorization: string, id: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getReviewLike.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReviewLike.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getReviewLike.');
            }
            const localVarPath = `/reviews/{id}/likes/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get List of Reviews
         * @summary Get List of Reviews
         * @param {number} [gameId] 
         * @param {number} [userId] 
         * @param {number} [id] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [textReviewsFirst] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [removed] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviews: async (gameId?: number, userId?: number, id?: number, page?: number, limit?: number, textReviewsFirst?: boolean, includeOwnerReview?: boolean, removed?: boolean, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['gameId'] = gameId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (textReviewsFirst !== undefined) {
                localVarQueryParameter['textReviewsFirst'] = textReviewsFirst;
            }

            if (includeOwnerReview !== undefined) {
                localVarQueryParameter['includeOwnerReview'] = includeOwnerReview;
            }

            if (removed !== undefined) {
                localVarQueryParameter['removed'] = removed;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['orderCol'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['orderDir'] = orderDir;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Review (User Only)
         * @summary Update Review (User Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReview: async (body: Review, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchReview.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling patchReview.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchReview.');
            }
            const localVarPath = `/reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Review for Game (User/Admin Only)
         * @summary Add Review for Game (User/Admin Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGameReview: async (body: Review, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putGameReview.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling putGameReview.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putGameReview.');
            }
            const localVarPath = `/games/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Like Review (User/Admin Only)
         * @summary Like Review (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReviewLike: async (authorization: string, id: number, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling putReviewLike.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putReviewLike.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling putReviewLike.');
            }
            const localVarPath = `/reviews/{id}/likes/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewsApi - functional programming interface
 * @export
 */
export const ReviewsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Unlike Review (User/Admin Only)
         * @summary Unlike Review (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).deleteReviewLike(authorization, id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Reviews for Game
         * @summary Get Reviews for Game
         * @param {number} id 
         * @param {number} [byUserId] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [textReviewsFirst] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameReviews(id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Review>>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).getGameReviews(id, byUserId, includeOwnerReview, textReviewsFirst, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Review
         * @summary Get Review
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReview(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Review>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).getReview(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Review Count
         * @summary Get Review Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).getReviewCount(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns whether a user likes a specific review. (User/Admin Only)
         * @summary Like Check for User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<boolean>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).getReviewLike(authorization, id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get List of Reviews
         * @summary Get List of Reviews
         * @param {number} [gameId] 
         * @param {number} [userId] 
         * @param {number} [id] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [textReviewsFirst] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [removed] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviews(gameId?: number, userId?: number, id?: number, page?: number, limit?: number, textReviewsFirst?: boolean, includeOwnerReview?: boolean, removed?: boolean, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Review>>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).getReviews(gameId, userId, id, page, limit, textReviewsFirst, includeOwnerReview, removed, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update Review (User Only)
         * @summary Update Review (User Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).patchReview(body, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add Review for Game (User/Admin Only)
         * @summary Add Review for Game (User/Admin Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGameReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Review>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).putGameReview(body, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Like Review (User/Admin Only)
         * @summary Like Review (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReviewsApiAxiosParamCreator(configuration).putReviewLike(authorization, id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReviewsApi - factory interface
 * @export
 */
export const ReviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Unlike Review (User/Admin Only)
         * @summary Unlike Review (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReviewsApiFp(configuration).deleteReviewLike(authorization, id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Reviews for Game
         * @summary Get Reviews for Game
         * @param {number} id 
         * @param {number} [byUserId] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [textReviewsFirst] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameReviews(id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Review>>> {
            return ReviewsApiFp(configuration).getGameReviews(id, byUserId, includeOwnerReview, textReviewsFirst, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Review
         * @summary Get Review
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReview(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Review>> {
            return ReviewsApiFp(configuration).getReview(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Review Count
         * @summary Get Review Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewCount(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return ReviewsApiFp(configuration).getReviewCount(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns whether a user likes a specific review. (User/Admin Only)
         * @summary Like Check for User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>> {
            return ReviewsApiFp(configuration).getReviewLike(authorization, id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get List of Reviews
         * @summary Get List of Reviews
         * @param {number} [gameId] 
         * @param {number} [userId] 
         * @param {number} [id] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {boolean} [textReviewsFirst] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [removed] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReviews(gameId?: number, userId?: number, id?: number, page?: number, limit?: number, textReviewsFirst?: boolean, includeOwnerReview?: boolean, removed?: boolean, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Review>>> {
            return ReviewsApiFp(configuration).getReviews(gameId, userId, id, page, limit, textReviewsFirst, includeOwnerReview, removed, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Review (User Only)
         * @summary Update Review (User Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReviewsApiFp(configuration).patchReview(body, authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Review for Game (User/Admin Only)
         * @summary Add Review for Game (User/Admin Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGameReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Review>> {
            return ReviewsApiFp(configuration).putGameReview(body, authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Like Review (User/Admin Only)
         * @summary Like Review (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReviewsApiFp(configuration).putReviewLike(authorization, id, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReviewsApi - interface
 * @export
 * @interface ReviewsApi
 */
export interface ReviewsApiInterface {
    /**
     * Unlike Review (User/Admin Only)
     * @summary Unlike Review (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async deleteReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;

    /**
     * Get Reviews for Game
     * @summary Get Reviews for Game
     * @param {number} id 
     * @param {number} [byUserId] 
     * @param {boolean} [includeOwnerReview] 
     * @param {boolean} [textReviewsFirst] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async getGameReviews(id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Review>>>;

    /**
     * Get Review
     * @summary Get Review
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async getReview(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Review>>;

    /**
     * Get Review Count
     * @summary Get Review Count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async getReviewCount(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>>;

    /**
     * Returns whether a user likes a specific review. (User/Admin Only)
     * @summary Like Check for User (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async getReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<boolean>>;

    /**
     * Get List of Reviews
     * @summary Get List of Reviews
     * @param {number} [gameId] 
     * @param {number} [userId] 
     * @param {number} [id] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {boolean} [textReviewsFirst] 
     * @param {boolean} [includeOwnerReview] 
     * @param {boolean} [removed] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async getReviews(gameId?: number, userId?: number, id?: number, page?: number, limit?: number, textReviewsFirst?: boolean, includeOwnerReview?: boolean, removed?: boolean, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Review>>>;

    /**
     * Update Review (User Only)
     * @summary Update Review (User Only)
     * @param {Review} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async patchReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;

    /**
     * Add Review for Game (User/Admin Only)
     * @summary Add Review for Game (User/Admin Only)
     * @param {Review} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async putGameReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Review>>;

    /**
     * Like Review (User/Admin Only)
     * @summary Like Review (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApiInterface
     */
    async putReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;

}

/**
 * ReviewsApi - object-oriented interface
 * @export
 * @class ReviewsApi
 * @extends {BaseAPI}
 */
export class ReviewsApi extends BaseAPI implements ReviewsApiInterface {
    /**
     * Unlike Review (User/Admin Only)
     * @summary Unlike Review (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async deleteReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReviewsApiFp(this.configuration).deleteReviewLike(authorization, id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Reviews for Game
     * @summary Get Reviews for Game
     * @param {number} id 
     * @param {number} [byUserId] 
     * @param {boolean} [includeOwnerReview] 
     * @param {boolean} [textReviewsFirst] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async getGameReviews(id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Review>>> {
        return ReviewsApiFp(this.configuration).getGameReviews(id, byUserId, includeOwnerReview, textReviewsFirst, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Review
     * @summary Get Review
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async getReview(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Review>> {
        return ReviewsApiFp(this.configuration).getReview(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Review Count
     * @summary Get Review Count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async getReviewCount(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return ReviewsApiFp(this.configuration).getReviewCount(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns whether a user likes a specific review. (User/Admin Only)
     * @summary Like Check for User (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async getReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<boolean>> {
        return ReviewsApiFp(this.configuration).getReviewLike(authorization, id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get List of Reviews
     * @summary Get List of Reviews
     * @param {number} [gameId] 
     * @param {number} [userId] 
     * @param {number} [id] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {boolean} [textReviewsFirst] 
     * @param {boolean} [includeOwnerReview] 
     * @param {boolean} [removed] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async getReviews(gameId?: number, userId?: number, id?: number, page?: number, limit?: number, textReviewsFirst?: boolean, includeOwnerReview?: boolean, removed?: boolean, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Review>>> {
        return ReviewsApiFp(this.configuration).getReviews(gameId, userId, id, page, limit, textReviewsFirst, includeOwnerReview, removed, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Review (User Only)
     * @summary Update Review (User Only)
     * @param {Review} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async patchReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReviewsApiFp(this.configuration).patchReview(body, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Review for Game (User/Admin Only)
     * @summary Add Review for Game (User/Admin Only)
     * @param {Review} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async putGameReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Review>> {
        return ReviewsApiFp(this.configuration).putGameReview(body, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Like Review (User/Admin Only)
     * @summary Like Review (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public async putReviewLike(authorization: string, id: number, userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReviewsApiFp(this.configuration).putReviewLike(authorization, id, userId, options).then((request) => request(this.axios, this.basePath));
    }
}
