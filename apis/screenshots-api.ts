/* tslint:disable */
/* eslint-disable */
/**
 * Delicious Fruit API
 * The API you should use instead of throwing your monitor out the window
 *
 * OpenAPI spec version: 1.0.0-rc.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { APIError } from '../models';
import { Screenshot } from '../models';
/**
 * ScreenshotsApi - axios parameter creator
 * @export
 */
export const ScreenshotsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScreenshot: async (authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteScreenshot.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteScreenshot.');
            }
            const localVarPath = `/screenshots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Screenshots for Game
         * @summary Get Screenshots for Game
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameScreenshot: async (id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameScreenshot.');
            }
            const localVarPath = `/games/{id}/screenshots`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Screenshot
         * @summary Get Screenshot
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenshot: async (id: number, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getScreenshot.');
            }
            const localVarPath = `/screenshots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get List of Screenshots
         * @summary Get List of Screenshots
         * @param {string} [authorization] 
         * @param {number} [gameId] 
         * @param {boolean} [removed] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [id] 
         * @param {number} [addedById] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenshots: async (authorization?: string, gameId?: number, removed?: boolean, approved?: boolean, page?: number, limit?: number, id?: number, addedById?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screenshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['gameId'] = gameId;
            }

            if (removed !== undefined) {
                localVarQueryParameter['removed'] = removed;
            }

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (addedById !== undefined) {
                localVarQueryParameter['addedById'] = addedById;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Screenshot} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchScreenshot: async (body: Screenshot, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchScreenshot.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling patchScreenshot.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchScreenshot.');
            }
            const localVarPath = `/screenshots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Screenshot for Game (User/Admin Only)
         * @summary Add Screenshot for Game (User/Admin Only)
         * @param {string} description 
         * @param {Blob} screenshot 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGameScreenshotForm: async (description: string, screenshot: Blob, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling postGameScreenshotForm.');
            }
            // verify required parameter 'screenshot' is not null or undefined
            if (screenshot === null || screenshot === undefined) {
                throw new RequiredError('screenshot','Required parameter screenshot was null or undefined when calling postGameScreenshotForm.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling postGameScreenshotForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postGameScreenshotForm.');
            }
            const localVarPath = `/games/{id}/screenshots`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }

            if (screenshot !== undefined) { 
                localVarFormParams.append('screenshot', screenshot as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScreenshotsApi - functional programming interface
 * @export
 */
export const ScreenshotsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScreenshot(authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<APIError>>> {
            const localVarAxiosArgs = await ScreenshotsApiAxiosParamCreator(configuration).deleteScreenshot(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Screenshots for Game
         * @summary Get Screenshots for Game
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameScreenshot(id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Screenshot>>>> {
            const localVarAxiosArgs = await ScreenshotsApiAxiosParamCreator(configuration).getGameScreenshot(id, authorization, approved, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Screenshot
         * @summary Get Screenshot
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenshot(id: number, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Screenshot>>> {
            const localVarAxiosArgs = await ScreenshotsApiAxiosParamCreator(configuration).getScreenshot(id, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get List of Screenshots
         * @summary Get List of Screenshots
         * @param {string} [authorization] 
         * @param {number} [gameId] 
         * @param {boolean} [removed] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [id] 
         * @param {number} [addedById] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenshots(authorization?: string, gameId?: number, removed?: boolean, approved?: boolean, page?: number, limit?: number, id?: number, addedById?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Screenshot>>>> {
            const localVarAxiosArgs = await ScreenshotsApiAxiosParamCreator(configuration).getScreenshots(authorization, gameId, removed, approved, page, limit, id, addedById, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Screenshot} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchScreenshot(body: Screenshot, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Screenshot>>> {
            const localVarAxiosArgs = await ScreenshotsApiAxiosParamCreator(configuration).patchScreenshot(body, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add Screenshot for Game (User/Admin Only)
         * @summary Add Screenshot for Game (User/Admin Only)
         * @param {string} description 
         * @param {Blob} screenshot 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGameScreenshotForm(description: string, screenshot: Blob, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Screenshot>>> {
            const localVarAxiosArgs = await ScreenshotsApiAxiosParamCreator(configuration).postGameScreenshotForm(description, screenshot, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ScreenshotsApi - factory interface
 * @export
 */
export const ScreenshotsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScreenshot(authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<APIError>> {
            return ScreenshotsApiFp(configuration).deleteScreenshot(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Screenshots for Game
         * @summary Get Screenshots for Game
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameScreenshot(id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Screenshot>>> {
            return ScreenshotsApiFp(configuration).getGameScreenshot(id, authorization, approved, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Screenshot
         * @summary Get Screenshot
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenshot(id: number, authorization?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Screenshot>> {
            return ScreenshotsApiFp(configuration).getScreenshot(id, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get List of Screenshots
         * @summary Get List of Screenshots
         * @param {string} [authorization] 
         * @param {number} [gameId] 
         * @param {boolean} [removed] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [id] 
         * @param {number} [addedById] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreenshots(authorization?: string, gameId?: number, removed?: boolean, approved?: boolean, page?: number, limit?: number, id?: number, addedById?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Screenshot>>> {
            return ScreenshotsApiFp(configuration).getScreenshots(authorization, gameId, removed, approved, page, limit, id, addedById, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Screenshot} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchScreenshot(body: Screenshot, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Screenshot>> {
            return ScreenshotsApiFp(configuration).patchScreenshot(body, authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Screenshot for Game (User/Admin Only)
         * @summary Add Screenshot for Game (User/Admin Only)
         * @param {string} description 
         * @param {Blob} screenshot 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGameScreenshotForm(description: string, screenshot: Blob, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Screenshot>> {
            return ScreenshotsApiFp(configuration).postGameScreenshotForm(description, screenshot, authorization, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScreenshotsApi - interface
 * @export
 * @interface ScreenshotsApi
 */
export interface ScreenshotsApiInterface {
    /**
     * 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApiInterface
     */
    async deleteScreenshot(authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<APIError>>;

    /**
     * Get Screenshots for Game
     * @summary Get Screenshots for Game
     * @param {number} id 
     * @param {string} [authorization] 
     * @param {boolean} [approved] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApiInterface
     */
    async getGameScreenshot(id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Screenshot>>>;

    /**
     * Get Screenshot
     * @summary Get Screenshot
     * @param {number} id 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApiInterface
     */
    async getScreenshot(id: number, authorization?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Screenshot>>;

    /**
     * Get List of Screenshots
     * @summary Get List of Screenshots
     * @param {string} [authorization] 
     * @param {number} [gameId] 
     * @param {boolean} [removed] 
     * @param {boolean} [approved] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {number} [id] 
     * @param {number} [addedById] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApiInterface
     */
    async getScreenshots(authorization?: string, gameId?: number, removed?: boolean, approved?: boolean, page?: number, limit?: number, id?: number, addedById?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Screenshot>>>;

    /**
     * 
     * @param {Screenshot} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApiInterface
     */
    async patchScreenshot(body: Screenshot, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Screenshot>>;

    /**
     * Add Screenshot for Game (User/Admin Only)
     * @summary Add Screenshot for Game (User/Admin Only)
     * @param {string} description 
     * @param {Blob} screenshot 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApiInterface
     */
    async postGameScreenshotForm(description: string, screenshot: Blob, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Screenshot>>;

}

/**
 * ScreenshotsApi - object-oriented interface
 * @export
 * @class ScreenshotsApi
 * @extends {BaseAPI}
 */
export class ScreenshotsApi extends BaseAPI implements ScreenshotsApiInterface {
    /**
     * 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApi
     */
    public async deleteScreenshot(authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<APIError>> {
        return ScreenshotsApiFp(this.configuration).deleteScreenshot(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Screenshots for Game
     * @summary Get Screenshots for Game
     * @param {number} id 
     * @param {string} [authorization] 
     * @param {boolean} [approved] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApi
     */
    public async getGameScreenshot(id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Screenshot>>> {
        return ScreenshotsApiFp(this.configuration).getGameScreenshot(id, authorization, approved, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Screenshot
     * @summary Get Screenshot
     * @param {number} id 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApi
     */
    public async getScreenshot(id: number, authorization?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Screenshot>> {
        return ScreenshotsApiFp(this.configuration).getScreenshot(id, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get List of Screenshots
     * @summary Get List of Screenshots
     * @param {string} [authorization] 
     * @param {number} [gameId] 
     * @param {boolean} [removed] 
     * @param {boolean} [approved] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {number} [id] 
     * @param {number} [addedById] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApi
     */
    public async getScreenshots(authorization?: string, gameId?: number, removed?: boolean, approved?: boolean, page?: number, limit?: number, id?: number, addedById?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Screenshot>>> {
        return ScreenshotsApiFp(this.configuration).getScreenshots(authorization, gameId, removed, approved, page, limit, id, addedById, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {Screenshot} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApi
     */
    public async patchScreenshot(body: Screenshot, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Screenshot>> {
        return ScreenshotsApiFp(this.configuration).patchScreenshot(body, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Screenshot for Game (User/Admin Only)
     * @summary Add Screenshot for Game (User/Admin Only)
     * @param {string} description 
     * @param {Blob} screenshot 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScreenshotsApi
     */
    public async postGameScreenshotForm(description: string, screenshot: Blob, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Screenshot>> {
        return ScreenshotsApiFp(this.configuration).postGameScreenshotForm(description, screenshot, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
}
