/* tslint:disable */
/* eslint-disable */
/**
 * Delicious Fruit API
 * The API you should use instead of throwing your monitor out the window
 *
 * OpenAPI spec version: 2.0.0-rc0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { APIError } from '../models';
import { Game } from '../models';
import { GameExt } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse204 } from '../models';
import { PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_ } from '../models';
import { Rating } from '../models';
import { Review } from '../models';
import { Screenshot } from '../models';
/**
 * GamesApi - axios parameter creator
 * @export
 */
export const GamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove Game. This is idempotent - repeated deletions of the same game have no effect.
         * @summary Remove Game (Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGame: async (authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteGame.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteGame.');
            }
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGame.');
            }
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameCompositeAll: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameCompositeAll.');
            }
            const localVarPath = `/composite/games/{id}/all`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Ratings for Game
         * @summary Get Ratings for Game
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameRatings: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameRatings.');
            }
            const localVarPath = `/games/{id}/ratings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Reviews for Game
         * @summary Get Reviews for Game
         * @param {number} id 
         * @param {number} [byUserId] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [textReviewsFirst] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameReviews: async (id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameReviews.');
            }
            const localVarPath = `/games/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (byUserId !== undefined) {
                localVarQueryParameter['byUserId'] = byUserId;
            }

            if (includeOwnerReview !== undefined) {
                localVarQueryParameter['includeOwnerReview'] = includeOwnerReview;
            }

            if (textReviewsFirst !== undefined) {
                localVarQueryParameter['textReviewsFirst'] = textReviewsFirst;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Screenshots for Game
         * @summary Get Screenshots for Game
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameScreenshot: async (id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameScreenshot.');
            }
            const localVarPath = `/games/{id}/screenshots`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Tags Associated to Game
         * @summary Get Tags Associated to Game
         * @param {number} id 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameTags: async (id: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameTags.');
            }
            const localVarPath = `/games/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [nameStartsWith] 
         * @param {string} [nameExp] 
         * @param {Array<number>} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGames: async (authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, nameStartsWith?: string, nameExp?: string, tags?: Array<number>, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (removed !== undefined) {
                localVarQueryParameter['removed'] = removed;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (nameStartsWith !== undefined) {
                localVarQueryParameter['nameStartsWith'] = nameStartsWith;
            }

            if (nameExp !== undefined) {
                localVarQueryParameter['nameExp'] = nameExp;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (ownerUserId !== undefined) {
                localVarQueryParameter['ownerUserId'] = ownerUserId;
            }

            if (hasDownload !== undefined) {
                localVarQueryParameter['hasDownload'] = hasDownload;
            }

            if (createdFrom !== undefined) {
                localVarQueryParameter['createdFrom'] = (createdFrom as any instanceof Date) ?
                    (createdFrom as any).toISOString() :
                    createdFrom;
            }

            if (createdTo !== undefined) {
                localVarQueryParameter['createdTo'] = (createdTo as any instanceof Date) ?
                    (createdTo as any).toISOString() :
                    createdTo;
            }

            if (clearedByUserId !== undefined) {
                localVarQueryParameter['clearedByUserId'] = clearedByUserId;
            }

            if (reviewedByUserId !== undefined) {
                localVarQueryParameter['reviewedByUserId'] = reviewedByUserId;
            }

            if (ratingFrom !== undefined) {
                localVarQueryParameter['ratingFrom'] = ratingFrom;
            }

            if (ratingTo !== undefined) {
                localVarQueryParameter['ratingTo'] = ratingTo;
            }

            if (difficultyFrom !== undefined) {
                localVarQueryParameter['difficultyFrom'] = difficultyFrom;
            }

            if (difficultyTo !== undefined) {
                localVarQueryParameter['difficultyTo'] = difficultyTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['order_col'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['order_dir'] = orderDir;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGamesWithRatings: async (authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/composite/games/rating`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (removed !== undefined) {
                localVarQueryParameter['removed'] = removed;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (ownerUserId !== undefined) {
                localVarQueryParameter['ownerUserId'] = ownerUserId;
            }

            if (hasDownload !== undefined) {
                localVarQueryParameter['hasDownload'] = hasDownload;
            }

            if (createdFrom !== undefined) {
                localVarQueryParameter['createdFrom'] = (createdFrom as any instanceof Date) ?
                    (createdFrom as any).toISOString() :
                    createdFrom;
            }

            if (createdTo !== undefined) {
                localVarQueryParameter['createdTo'] = (createdTo as any instanceof Date) ?
                    (createdTo as any).toISOString() :
                    createdTo;
            }

            if (clearedByUserId !== undefined) {
                localVarQueryParameter['clearedByUserId'] = clearedByUserId;
            }

            if (reviewedByUserId !== undefined) {
                localVarQueryParameter['reviewedByUserId'] = reviewedByUserId;
            }

            if (ratingFrom !== undefined) {
                localVarQueryParameter['ratingFrom'] = ratingFrom;
            }

            if (ratingTo !== undefined) {
                localVarQueryParameter['ratingTo'] = ratingTo;
            }

            if (difficultyFrom !== undefined) {
                localVarQueryParameter['difficultyFrom'] = difficultyFrom;
            }

            if (difficultyTo !== undefined) {
                localVarQueryParameter['difficultyTo'] = difficultyTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['order_col'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['order_dir'] = orderDir;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Game (Admin Only)
         * @summary Update Game (Admin Only)
         * @param {Game} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGame: async (body: Game, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchGame.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling patchGame.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchGame.');
            }
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Game (Admin Only)
         * @summary Add Game (Admin Only)
         * @param {PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_} body 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGame: async (body: PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postGame.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling postGame.');
            }
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Screenshot for Game (User/Admin Only)
         * @summary Add Screenshot for Game (User/Admin Only)
         * @param {string} description 
         * @param {Blob} screenshot 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGameScreenshotForm: async (description: string, screenshot: Blob, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'description' is not null or undefined
            if (description === null || description === undefined) {
                throw new RequiredError('description','Required parameter description was null or undefined when calling postGameScreenshotForm.');
            }
            // verify required parameter 'screenshot' is not null or undefined
            if (screenshot === null || screenshot === undefined) {
                throw new RequiredError('screenshot','Required parameter screenshot was null or undefined when calling postGameScreenshotForm.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling postGameScreenshotForm.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postGameScreenshotForm.');
            }
            const localVarPath = `/games/{id}/screenshots`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }

            if (screenshot !== undefined) { 
                localVarFormParams.append('screenshot', screenshot as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Clears and sets an array of tag IDs for a game on a user-by-user basis.
         * @summary Set Tags Associated to Game
         * @param {Array<any>} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGameSetTags: async (body: Array<any>, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postGameSetTags.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling postGameSetTags.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postGameSetTags.');
            }
            const localVarPath = `/games/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Review for Game (User/Admin Only)
         * @summary Add Review for Game (User/Admin Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGameReview: async (body: Review, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putGameReview.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling putGameReview.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putGameReview.');
            }
            const localVarPath = `/games/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamesApi - functional programming interface
 * @export
 */
export const GamesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove Game. This is idempotent - repeated deletions of the same game have no effect.
         * @summary Remove Game (Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGame(authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse204>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).deleteGame(authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGame(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Game>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGame(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameCompositeAll(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GameExt>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameCompositeAll(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Ratings for Game
         * @summary Get Ratings for Game
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameRatings(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Rating>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameRatings(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Reviews for Game
         * @summary Get Reviews for Game
         * @param {number} id 
         * @param {number} [byUserId] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [textReviewsFirst] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameReviews(id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Review>>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameReviews(id, byUserId, includeOwnerReview, textReviewsFirst, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Screenshots for Game
         * @summary Get Screenshots for Game
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameScreenshot(id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Screenshot>>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameScreenshot(id, authorization, approved, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Tags Associated to Game
         * @summary Get Tags Associated to Game
         * @param {number} id 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameTags(id: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameTags(id, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [nameStartsWith] 
         * @param {string} [nameExp] 
         * @param {Array<number>} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGames(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, nameStartsWith?: string, nameExp?: string, tags?: Array<number>, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Game>>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGames(authorization, q, id, removed, name, nameStartsWith, nameExp, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGamesWithRatings(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GameExt>>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGamesWithRatings(authorization, q, id, removed, name, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update Game (Admin Only)
         * @summary Update Game (Admin Only)
         * @param {Game} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchGame(body: Game, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Game>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).patchGame(body, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add Game (Admin Only)
         * @summary Add Game (Admin Only)
         * @param {PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_} body 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGame(body: PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Game>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).postGame(body, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add Screenshot for Game (User/Admin Only)
         * @summary Add Screenshot for Game (User/Admin Only)
         * @param {string} description 
         * @param {Blob} screenshot 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGameScreenshotForm(description: string, screenshot: Blob, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Screenshot>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).postGameScreenshotForm(description, screenshot, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Clears and sets an array of tag IDs for a game on a user-by-user basis.
         * @summary Set Tags Associated to Game
         * @param {Array<any>} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGameSetTags(body: Array<any>, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).postGameSetTags(body, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add Review for Game (User/Admin Only)
         * @summary Add Review for Game (User/Admin Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGameReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Review>>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).putGameReview(body, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GamesApi - factory interface
 * @export
 */
export const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove Game. This is idempotent - repeated deletions of the same game have no effect.
         * @summary Remove Game (Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGame(authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse204>> {
            return GamesApiFp(configuration).deleteGame(authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGame(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Game>> {
            return GamesApiFp(configuration).getGame(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameCompositeAll(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GameExt>> {
            return GamesApiFp(configuration).getGameCompositeAll(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Ratings for Game
         * @summary Get Ratings for Game
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameRatings(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Rating>> {
            return GamesApiFp(configuration).getGameRatings(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Reviews for Game
         * @summary Get Reviews for Game
         * @param {number} id 
         * @param {number} [byUserId] 
         * @param {boolean} [includeOwnerReview] 
         * @param {boolean} [textReviewsFirst] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameReviews(id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Review>>> {
            return GamesApiFp(configuration).getGameReviews(id, byUserId, includeOwnerReview, textReviewsFirst, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Screenshots for Game
         * @summary Get Screenshots for Game
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {boolean} [approved] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameScreenshot(id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Screenshot>>> {
            return GamesApiFp(configuration).getGameScreenshot(id, authorization, approved, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Tags Associated to Game
         * @summary Get Tags Associated to Game
         * @param {number} id 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameTags(id: number, userId?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return GamesApiFp(configuration).getGameTags(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [nameStartsWith] 
         * @param {string} [nameExp] 
         * @param {Array<number>} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGames(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, nameStartsWith?: string, nameExp?: string, tags?: Array<number>, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Game>>> {
            return GamesApiFp(configuration).getGames(authorization, q, id, removed, name, nameStartsWith, nameExp, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGamesWithRatings(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GameExt>>> {
            return GamesApiFp(configuration).getGamesWithRatings(authorization, q, id, removed, name, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Game (Admin Only)
         * @summary Update Game (Admin Only)
         * @param {Game} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchGame(body: Game, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Game>> {
            return GamesApiFp(configuration).patchGame(body, authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Game (Admin Only)
         * @summary Add Game (Admin Only)
         * @param {PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_} body 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGame(body: PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_, authorization: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Game>> {
            return GamesApiFp(configuration).postGame(body, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Screenshot for Game (User/Admin Only)
         * @summary Add Screenshot for Game (User/Admin Only)
         * @param {string} description 
         * @param {Blob} screenshot 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGameScreenshotForm(description: string, screenshot: Blob, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Screenshot>> {
            return GamesApiFp(configuration).postGameScreenshotForm(description, screenshot, authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Clears and sets an array of tag IDs for a game on a user-by-user basis.
         * @summary Set Tags Associated to Game
         * @param {Array<any>} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGameSetTags(body: Array<any>, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return GamesApiFp(configuration).postGameSetTags(body, authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Review for Game (User/Admin Only)
         * @summary Add Review for Game (User/Admin Only)
         * @param {Review} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGameReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Review>> {
            return GamesApiFp(configuration).putGameReview(body, authorization, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export class GamesApi extends BaseAPI {
    /**
     * Remove Game. This is idempotent - repeated deletions of the same game have no effect.
     * @summary Remove Game (Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async deleteGame(authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse204>> {
        return GamesApiFp(this.configuration).deleteGame(authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Game
     * @summary Get Game
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGame(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Game>> {
        return GamesApiFp(this.configuration).getGame(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Game
     * @summary Get Game
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGameCompositeAll(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GameExt>> {
        return GamesApiFp(this.configuration).getGameCompositeAll(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Ratings for Game
     * @summary Get Ratings for Game
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGameRatings(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Rating>> {
        return GamesApiFp(this.configuration).getGameRatings(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Reviews for Game
     * @summary Get Reviews for Game
     * @param {number} id 
     * @param {number} [byUserId] 
     * @param {boolean} [includeOwnerReview] 
     * @param {boolean} [textReviewsFirst] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGameReviews(id: number, byUserId?: number, includeOwnerReview?: boolean, textReviewsFirst?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Review>>> {
        return GamesApiFp(this.configuration).getGameReviews(id, byUserId, includeOwnerReview, textReviewsFirst, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Screenshots for Game
     * @summary Get Screenshots for Game
     * @param {number} id 
     * @param {string} [authorization] 
     * @param {boolean} [approved] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGameScreenshot(id: number, authorization?: string, approved?: boolean, page?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Screenshot>>> {
        return GamesApiFp(this.configuration).getGameScreenshot(id, authorization, approved, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Tags Associated to Game
     * @summary Get Tags Associated to Game
     * @param {number} id 
     * @param {number} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGameTags(id: number, userId?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return GamesApiFp(this.configuration).getGameTags(id, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Game List
     * @summary Game List
     * @param {string} [authorization] 
     * @param {string} [q] 
     * @param {number} [id] 
     * @param {boolean} [removed] 
     * @param {string} [name] 
     * @param {string} [nameStartsWith] 
     * @param {string} [nameExp] 
     * @param {Array<number>} [tags] 
     * @param {string} [author] 
     * @param {number} [ownerUserId] 
     * @param {boolean} [hasDownload] 
     * @param {Date} [createdFrom] 
     * @param {Date} [createdTo] 
     * @param {number} [clearedByUserId] 
     * @param {number} [reviewedByUserId] 
     * @param {number} [ratingFrom] 
     * @param {number} [ratingTo] 
     * @param {number} [difficultyFrom] 
     * @param {number} [difficultyTo] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGames(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, nameStartsWith?: string, nameExp?: string, tags?: Array<number>, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Game>>> {
        return GamesApiFp(this.configuration).getGames(authorization, q, id, removed, name, nameStartsWith, nameExp, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Game List
     * @summary Game List
     * @param {string} [authorization] 
     * @param {string} [q] 
     * @param {number} [id] 
     * @param {boolean} [removed] 
     * @param {string} [name] 
     * @param {string} [tags] 
     * @param {string} [author] 
     * @param {number} [ownerUserId] 
     * @param {boolean} [hasDownload] 
     * @param {Date} [createdFrom] 
     * @param {Date} [createdTo] 
     * @param {number} [clearedByUserId] 
     * @param {number} [reviewedByUserId] 
     * @param {number} [ratingFrom] 
     * @param {number} [ratingTo] 
     * @param {number} [difficultyFrom] 
     * @param {number} [difficultyTo] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async getGamesWithRatings(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GameExt>>> {
        return GamesApiFp(this.configuration).getGamesWithRatings(authorization, q, id, removed, name, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Game (Admin Only)
     * @summary Update Game (Admin Only)
     * @param {Game} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async patchGame(body: Game, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Game>> {
        return GamesApiFp(this.configuration).patchGame(body, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Game (Admin Only)
     * @summary Add Game (Admin Only)
     * @param {PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_} body 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async postGame(body: PickGameNameOrUrlOrUrlSpdrnOrAuthorOrCollabOrDateCreatedOrOwnerId_, authorization: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Game>> {
        return GamesApiFp(this.configuration).postGame(body, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Screenshot for Game (User/Admin Only)
     * @summary Add Screenshot for Game (User/Admin Only)
     * @param {string} description 
     * @param {Blob} screenshot 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async postGameScreenshotForm(description: string, screenshot: Blob, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Screenshot>> {
        return GamesApiFp(this.configuration).postGameScreenshotForm(description, screenshot, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Clears and sets an array of tag IDs for a game on a user-by-user basis.
     * @summary Set Tags Associated to Game
     * @param {Array<any>} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async postGameSetTags(body: Array<any>, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return GamesApiFp(this.configuration).postGameSetTags(body, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add Review for Game (User/Admin Only)
     * @summary Add Review for Game (User/Admin Only)
     * @param {Review} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public async putGameReview(body: Review, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Review>> {
        return GamesApiFp(this.configuration).putGameReview(body, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
}
