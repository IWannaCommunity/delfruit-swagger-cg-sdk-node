/* tslint:disable */
/* eslint-disable */
/**
 * Delicious Fruit API
 * The API you should use instead of throwing your monitor out the window
 *
 * OpenAPI spec version: 1.0.0-rc.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { APIError } from '../models';
import { AuthResponse } from '../models';
import { FinalizePassResetParams } from '../models';
import { ResetRequestParams } from '../models';
import { UserCredentials } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Should be called with the token the user received in their reset email. Generates a token after successful completion.
         * @summary Finalize Password Reset
         * @param {FinalizePassResetParams} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFinalizePassReset: async (body?: FinalizePassResetParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Login
         * @summary Login
         * @param {UserCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (body: UserCredentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postLogin.');
            }
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user with a valid token to request a fresh token with a new expiration date. This should be invoked whenever the 'useExp' timestamp in the token payload has been exceeded.
         * @summary Refresh Token
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRefresh: async (authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling postRefresh.');
            }
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Request Password Reset
         * @summary Request Password Reset
         * @param {ResetRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResetRequest: async (body: ResetRequestParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postResetRequest.');
            }
            const localVarPath = `/auth/reset-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Should be called with the token the user received in their reset email. Generates a token after successful completion.
         * @summary Finalize Password Reset
         * @param {FinalizePassResetParams} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFinalizePassReset(body?: FinalizePassResetParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthResponse>>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).postFinalizePassReset(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Login
         * @summary Login
         * @param {UserCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(body: UserCredentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthResponse>>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).postLogin(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user with a valid token to request a fresh token with a new expiration date. This should be invoked whenever the 'useExp' timestamp in the token payload has been exceeded.
         * @summary Refresh Token
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRefresh(authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AuthResponse>>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).postRefresh(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Request Password Reset
         * @summary Request Password Reset
         * @param {ResetRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postResetRequest(body: ResetRequestParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).postResetRequest(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Should be called with the token the user received in their reset email. Generates a token after successful completion.
         * @summary Finalize Password Reset
         * @param {FinalizePassResetParams} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFinalizePassReset(body?: FinalizePassResetParams, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthResponse>> {
            return AuthenticationApiFp(configuration).postFinalizePassReset(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Login
         * @summary Login
         * @param {UserCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(body: UserCredentials, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthResponse>> {
            return AuthenticationApiFp(configuration).postLogin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user with a valid token to request a fresh token with a new expiration date. This should be invoked whenever the 'useExp' timestamp in the token payload has been exceeded.
         * @summary Refresh Token
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRefresh(authorization: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthResponse>> {
            return AuthenticationApiFp(configuration).postRefresh(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Request Password Reset
         * @summary Request Password Reset
         * @param {ResetRequestParams} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postResetRequest(body: ResetRequestParams, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AuthenticationApiFp(configuration).postResetRequest(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Should be called with the token the user received in their reset email. Generates a token after successful completion.
     * @summary Finalize Password Reset
     * @param {FinalizePassResetParams} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    async postFinalizePassReset(body?: FinalizePassResetParams, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthResponse>>;

    /**
     * Login
     * @summary Login
     * @param {UserCredentials} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    async postLogin(body: UserCredentials, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthResponse>>;

    /**
     * Allows a user with a valid token to request a fresh token with a new expiration date. This should be invoked whenever the 'useExp' timestamp in the token payload has been exceeded.
     * @summary Refresh Token
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    async postRefresh(authorization: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AuthResponse>>;

    /**
     * Request Password Reset
     * @summary Request Password Reset
     * @param {ResetRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    async postResetRequest(body: ResetRequestParams, options?: AxiosRequestConfig): Promise<AxiosResponse<void>>;

}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Should be called with the token the user received in their reset email. Generates a token after successful completion.
     * @summary Finalize Password Reset
     * @param {FinalizePassResetParams} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public async postFinalizePassReset(body?: FinalizePassResetParams, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthResponse>> {
        return AuthenticationApiFp(this.configuration).postFinalizePassReset(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Login
     * @summary Login
     * @param {UserCredentials} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public async postLogin(body: UserCredentials, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthResponse>> {
        return AuthenticationApiFp(this.configuration).postLogin(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user with a valid token to request a fresh token with a new expiration date. This should be invoked whenever the 'useExp' timestamp in the token payload has been exceeded.
     * @summary Refresh Token
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public async postRefresh(authorization: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AuthResponse>> {
        return AuthenticationApiFp(this.configuration).postRefresh(authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Request Password Reset
     * @summary Request Password Reset
     * @param {ResetRequestParams} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public async postResetRequest(body: ResetRequestParams, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AuthenticationApiFp(this.configuration).postResetRequest(body, options).then((request) => request(this.axios, this.basePath));
    }
}
