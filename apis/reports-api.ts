/* tslint:disable */
/* eslint-disable */
/**
 * Delicious Fruit API
 * The API you should use instead of throwing your monitor out the window
 *
 * OpenAPI spec version: 1.0.0-rc.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Report } from '../models';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Report (Admin Only)
         * @summary Get Report (Admin Only)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getReport.');
            }
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Report List (Admin Only)
         * @summary Repost List (Admin Only)
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {number} [id] 
         * @param {string} [type] 
         * @param {boolean} [answered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: async (page?: number, limit?: number, orderCol?: string, orderDir?: string, id?: number, type?: string, answered?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['orderCol'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['orderDir'] = orderDir;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (answered !== undefined) {
                localVarQueryParameter['answered'] = answered;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows admins to update the report, such as marking it as resolved.
         * @summary Update Report (Admin Only)
         * @param {Report} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchReport: async (body: Report, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchReport.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchReport.');
            }
            const localVarPath = `/reports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows a user to submit a report.
         * @summary Submit Report (User/Admin Only)
         * @param {Report} body 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReport: async (body: Report, authorization: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postReport.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling postReport.');
            }
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Report (Admin Only)
         * @summary Get Report (Admin Only)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReport(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Report>>> {
            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).getReport(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Report List (Admin Only)
         * @summary Repost List (Admin Only)
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {number} [id] 
         * @param {string} [type] 
         * @param {boolean} [answered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReports(page?: number, limit?: number, orderCol?: string, orderDir?: string, id?: number, type?: string, answered?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Report>>>> {
            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).getReports(page, limit, orderCol, orderDir, id, type, answered, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows admins to update the report, such as marking it as resolved.
         * @summary Update Report (Admin Only)
         * @param {Report} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReport(body: Report, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Report>>> {
            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).patchReport(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows a user to submit a report.
         * @summary Submit Report (User/Admin Only)
         * @param {Report} body 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReport(body: Report, authorization: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Report>>> {
            const localVarAxiosArgs = await ReportsApiAxiosParamCreator(configuration).postReport(body, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get Report (Admin Only)
         * @summary Get Report (Admin Only)
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReport(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Report>> {
            return ReportsApiFp(configuration).getReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Report List (Admin Only)
         * @summary Repost List (Admin Only)
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {number} [id] 
         * @param {string} [type] 
         * @param {boolean} [answered] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReports(page?: number, limit?: number, orderCol?: string, orderDir?: string, id?: number, type?: string, answered?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Report>>> {
            return ReportsApiFp(configuration).getReports(page, limit, orderCol, orderDir, id, type, answered, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows admins to update the report, such as marking it as resolved.
         * @summary Update Report (Admin Only)
         * @param {Report} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchReport(body: Report, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Report>> {
            return ReportsApiFp(configuration).patchReport(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to submit a report.
         * @summary Submit Report (User/Admin Only)
         * @param {Report} body 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReport(body: Report, authorization: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Report>> {
            return ReportsApiFp(configuration).postReport(body, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - interface
 * @export
 * @interface ReportsApi
 */
export interface ReportsApiInterface {
    /**
     * Get Report (Admin Only)
     * @summary Get Report (Admin Only)
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiInterface
     */
    async getReport(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Report>>;

    /**
     * Report List (Admin Only)
     * @summary Repost List (Admin Only)
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {number} [id] 
     * @param {string} [type] 
     * @param {boolean} [answered] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiInterface
     */
    async getReports(page?: number, limit?: number, orderCol?: string, orderDir?: string, id?: number, type?: string, answered?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Report>>>;

    /**
     * Allows admins to update the report, such as marking it as resolved.
     * @summary Update Report (Admin Only)
     * @param {Report} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiInterface
     */
    async patchReport(body: Report, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Report>>;

    /**
     * Allows a user to submit a report.
     * @summary Submit Report (User/Admin Only)
     * @param {Report} body 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiInterface
     */
    async postReport(body: Report, authorization: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Report>>;

}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI implements ReportsApiInterface {
    /**
     * Get Report (Admin Only)
     * @summary Get Report (Admin Only)
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public async getReport(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Report>> {
        return ReportsApiFp(this.configuration).getReport(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Report List (Admin Only)
     * @summary Repost List (Admin Only)
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {number} [id] 
     * @param {string} [type] 
     * @param {boolean} [answered] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public async getReports(page?: number, limit?: number, orderCol?: string, orderDir?: string, id?: number, type?: string, answered?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Report>>> {
        return ReportsApiFp(this.configuration).getReports(page, limit, orderCol, orderDir, id, type, answered, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows admins to update the report, such as marking it as resolved.
     * @summary Update Report (Admin Only)
     * @param {Report} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public async patchReport(body: Report, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Report>> {
        return ReportsApiFp(this.configuration).patchReport(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows a user to submit a report.
     * @summary Submit Report (User/Admin Only)
     * @param {Report} body 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public async postReport(body: Report, authorization: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Report>> {
        return ReportsApiFp(this.configuration).postReport(body, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
