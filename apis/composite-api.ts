/* tslint:disable */
/* eslint-disable */
/**
 * Delicious Fruit API
 * The API you should use instead of throwing your monitor out the window
 *
 * OpenAPI spec version: 1.0.0-rc.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { APIError } from '../models';
import { GameExt } from '../models';
import { OmitUserExtRatingsCountOrScreenshotCount_ } from '../models';
import { UserExt } from '../models';
/**
 * CompositeApi - axios parameter creator
 * @export
 */
export const CompositeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameCompositeAll: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameCompositeAll.');
            }
            const localVarPath = `/composite/games/{id}/all`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGamesWithRatings: async (authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/composite/games/rating`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (removed !== undefined) {
                localVarQueryParameter['removed'] = removed;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (ownerUserId !== undefined) {
                localVarQueryParameter['ownerUserId'] = ownerUserId;
            }

            if (hasDownload !== undefined) {
                localVarQueryParameter['hasDownload'] = hasDownload;
            }

            if (createdFrom !== undefined) {
                localVarQueryParameter['createdFrom'] = (createdFrom as any instanceof Date) ?
                    (createdFrom as any).toISOString() :
                    createdFrom;
            }

            if (createdTo !== undefined) {
                localVarQueryParameter['createdTo'] = (createdTo as any instanceof Date) ?
                    (createdTo as any).toISOString() :
                    createdTo;
            }

            if (clearedByUserId !== undefined) {
                localVarQueryParameter['clearedByUserId'] = clearedByUserId;
            }

            if (reviewedByUserId !== undefined) {
                localVarQueryParameter['reviewedByUserId'] = reviewedByUserId;
            }

            if (ratingFrom !== undefined) {
                localVarQueryParameter['ratingFrom'] = ratingFrom;
            }

            if (ratingTo !== undefined) {
                localVarQueryParameter['ratingTo'] = ratingTo;
            }

            if (difficultyFrom !== undefined) {
                localVarQueryParameter['difficultyFrom'] = difficultyFrom;
            }

            if (difficultyTo !== undefined) {
                localVarQueryParameter['difficultyTo'] = difficultyTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['order_col'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['order_dir'] = orderDir;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCompositeAll: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserCompositeAll.');
            }
            const localVarPath = `/composite/users/{id}/all`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersWithReviewsCount: async (authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/composite/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (following !== undefined) {
                localVarQueryParameter['following'] = following;
            }

            if (banned !== undefined) {
                localVarQueryParameter['banned'] = banned;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['orderCol'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['orderDir'] = orderDir;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompositeApi - functional programming interface
 * @export
 */
export const CompositeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameCompositeAll(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GameExt>>> {
            const localVarAxiosArgs = await CompositeApiAxiosParamCreator(configuration).getGameCompositeAll(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGamesWithRatings(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<GameExt>>>> {
            const localVarAxiosArgs = await CompositeApiAxiosParamCreator(configuration).getGamesWithRatings(authorization, q, id, removed, name, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get User
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCompositeAll(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserExt>>> {
            const localVarAxiosArgs = await CompositeApiAxiosParamCreator(configuration).getUserCompositeAll(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersWithReviewsCount(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<OmitUserExtRatingsCountOrScreenshotCount_>>>> {
            const localVarAxiosArgs = await CompositeApiAxiosParamCreator(configuration).getUsersWithReviewsCount(authorization, name, following, banned, page, limit, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CompositeApi - factory interface
 * @export
 */
export const CompositeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get Game
         * @summary Get Game
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameCompositeAll(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GameExt>> {
            return CompositeApiFp(configuration).getGameCompositeAll(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Game List
         * @summary Game List
         * @param {string} [authorization] 
         * @param {string} [q] 
         * @param {number} [id] 
         * @param {boolean} [removed] 
         * @param {string} [name] 
         * @param {string} [tags] 
         * @param {string} [author] 
         * @param {number} [ownerUserId] 
         * @param {boolean} [hasDownload] 
         * @param {Date} [createdFrom] 
         * @param {Date} [createdTo] 
         * @param {number} [clearedByUserId] 
         * @param {number} [reviewedByUserId] 
         * @param {number} [ratingFrom] 
         * @param {number} [ratingTo] 
         * @param {number} [difficultyFrom] 
         * @param {number} [difficultyTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGamesWithRatings(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<GameExt>>> {
            return CompositeApiFp(configuration).getGamesWithRatings(authorization, q, id, removed, name, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCompositeAll(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserExt>> {
            return CompositeApiFp(configuration).getUserCompositeAll(id, options).then((request) => request(axios, basePath));
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersWithReviewsCount(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OmitUserExtRatingsCountOrScreenshotCount_>>> {
            return CompositeApiFp(configuration).getUsersWithReviewsCount(authorization, name, following, banned, page, limit, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompositeApi - object-oriented interface
 * @export
 * @class CompositeApi
 * @extends {BaseAPI}
 */
export class CompositeApi extends BaseAPI {
    /**
     * Get Game
     * @summary Get Game
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompositeApi
     */
    public async getGameCompositeAll(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GameExt>> {
        return CompositeApiFp(this.configuration).getGameCompositeAll(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Game List
     * @summary Game List
     * @param {string} [authorization] 
     * @param {string} [q] 
     * @param {number} [id] 
     * @param {boolean} [removed] 
     * @param {string} [name] 
     * @param {string} [tags] 
     * @param {string} [author] 
     * @param {number} [ownerUserId] 
     * @param {boolean} [hasDownload] 
     * @param {Date} [createdFrom] 
     * @param {Date} [createdTo] 
     * @param {number} [clearedByUserId] 
     * @param {number} [reviewedByUserId] 
     * @param {number} [ratingFrom] 
     * @param {number} [ratingTo] 
     * @param {number} [difficultyFrom] 
     * @param {number} [difficultyTo] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompositeApi
     */
    public async getGamesWithRatings(authorization?: string, q?: string, id?: number, removed?: boolean, name?: string, tags?: string, author?: string, ownerUserId?: number, hasDownload?: boolean, createdFrom?: Date, createdTo?: Date, clearedByUserId?: number, reviewedByUserId?: number, ratingFrom?: number, ratingTo?: number, difficultyFrom?: number, difficultyTo?: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<GameExt>>> {
        return CompositeApiFp(this.configuration).getGamesWithRatings(authorization, q, id, removed, name, tags, author, ownerUserId, hasDownload, createdFrom, createdTo, clearedByUserId, reviewedByUserId, ratingFrom, ratingTo, difficultyFrom, difficultyTo, page, limit, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get User
     * @summary Get User
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompositeApi
     */
    public async getUserCompositeAll(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserExt>> {
        return CompositeApiFp(this.configuration).getUserCompositeAll(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User List
     * @summary User List
     * @param {string} [authorization] 
     * @param {string} [name] 
     * @param {boolean} [following] 
     * @param {boolean} [banned] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompositeApi
     */
    public async getUsersWithReviewsCount(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<OmitUserExtRatingsCountOrScreenshotCount_>>> {
        return CompositeApiFp(this.configuration).getUsersWithReviewsCount(authorization, name, following, banned, page, limit, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
}
