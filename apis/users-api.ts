/* tslint:disable */
/* eslint-disable */
/**
 * Delicious Fruit API
 * The API you should use instead of throwing your monitor out the window
 *
 * OpenAPI spec version: 1.0.0-rc.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { APIError } from '../models';
import { Badge } from '../models';
import { EditUserPermissionsParam } from '../models';
import { InlineResponse2001 } from '../models';
import { OmitUserExtRatingsCountOrScreenshotCount_ } from '../models';
import { Permission } from '../models';
import { Review } from '../models';
import { UserExt } from '../models';
import { UserRegistration } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes a user from your following list. Idempotent.
         * @summary Unfollow User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserFollow: async (authorization: string, id: number, followerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling deleteUserFollow.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUserFollow.');
            }
            // verify required parameter 'followerId' is not null or undefined
            if (followerId === null || followerId === undefined) {
                throw new RequiredError('followerId','Required parameter followerId was null or undefined when calling deleteUserFollow.');
            }
            const localVarPath = `/users/{id}/follows/{followerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"followerId"}}`, encodeURIComponent(String(followerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCompositeAll: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserCompositeAll.');
            }
            const localVarPath = `/composite/users/{id}/all`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns if you are following a user.
         * @summary Check Following (User/Admin Only)
         * @param {string} authorization 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollow: async (authorization: string, followerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling getUserFollow.');
            }
            // verify required parameter 'followerId' is not null or undefined
            if (followerId === null || followerId === undefined) {
                throw new RequiredError('followerId','Required parameter followerId was null or undefined when calling getUserFollow.');
            }
            const localVarPath = `/users/follows/{followerId}`
                .replace(`{${"followerId"}}`, encodeURIComponent(String(followerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (following !== undefined) {
                localVarQueryParameter['following'] = following;
            }

            if (banned !== undefined) {
                localVarQueryParameter['banned'] = banned;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['orderCol'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['orderDir'] = orderDir;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersBadges: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUsersBadges.');
            }
            const localVarPath = `/users/{id}/badges`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} uid 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersLists: async (uid: number, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling getUsersLists.');
            }
            const localVarPath = `/users/{uid}/lists`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersReviews: async (id: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUsersReviews.');
            }
            const localVarPath = `/users/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['orderCol'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['orderDir'] = orderDir;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersWithReviewsCount: async (authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/composite/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (following !== undefined) {
                localVarQueryParameter['following'] = following;
            }

            if (banned !== undefined) {
                localVarQueryParameter['banned'] = banned;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderCol !== undefined) {
                localVarQueryParameter['orderCol'] = orderCol;
            }

            if (orderDir !== undefined) {
                localVarQueryParameter['orderDir'] = orderDir;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a user. If a password is provided, then the old password must also be provided.
         * @summary Modify User (User/Admin Only)
         * @param {any} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUser: async (body: any, authorization: string, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchUser.');
            }
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling patchUser.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchUser.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} uid 
         * @param {Permission} pid 
         * @param {EditUserPermissionsParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUsersPermissions: async (uid: number, pid: Permission, body?: EditUserPermissionsParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling patchUsersPermissions.');
            }
            // verify required parameter 'pid' is not null or undefined
            if (pid === null || pid === undefined) {
                throw new RequiredError('pid','Required parameter pid was null or undefined when calling patchUsersPermissions.');
            }
            const localVarPath = `/users/{uid}/permissions/{pid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"pid"}}`, encodeURIComponent(String(pid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Register New User
         * @summary Register New User
         * @param {UserRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser: async (body: UserRegistration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postUser.');
            }
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a user to your following list. Idempotent.
         * @summary Follow User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserFollow: async (authorization: string, id: number, followerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling putUserFollow.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putUserFollow.');
            }
            // verify required parameter 'followerId' is not null or undefined
            if (followerId === null || followerId === undefined) {
                throw new RequiredError('followerId','Required parameter followerId was null or undefined when calling putUserFollow.');
            }
            const localVarPath = `/users/{id}/follows/{followerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"followerId"}}`, encodeURIComponent(String(followerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes a user from your following list. Idempotent.
         * @summary Unfollow User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFollow(authorization: string, id: number, followerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).deleteUserFollow(authorization, id, followerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUser(id, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get User
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCompositeAll(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserExt>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUserCompositeAll(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns if you are following a user.
         * @summary Check Following (User/Admin Only)
         * @param {string} authorization 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollow(authorization: string, followerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUserFollow(authorization, followerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUsers(authorization, name, following, banned, page, limit, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersBadges(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Badge>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUsersBadges(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} uid 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersLists(uid: number, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<any>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUsersLists(uid, page, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersReviews(id: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Review>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUsersReviews(id, page, limit, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersWithReviewsCount(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<OmitUserExtRatingsCountOrScreenshotCount_>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getUsersWithReviewsCount(authorization, name, following, banned, page, limit, orderCol, orderDir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a user. If a password is provided, then the old password must also be provided.
         * @summary Modify User (User/Admin Only)
         * @param {any} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUser(body: any, authorization: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).patchUser(body, authorization, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} uid 
         * @param {Permission} pid 
         * @param {EditUserPermissionsParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUsersPermissions(uid: number, pid: Permission, body?: EditUserPermissionsParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Permission>>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).patchUsersPermissions(uid, pid, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register New User
         * @summary Register New User
         * @param {UserRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUser(body: UserRegistration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).postUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a user to your following list. Idempotent.
         * @summary Follow User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserFollow(authorization: string, id: number, followerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).putUserFollow(authorization, id, followerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes a user from your following list. Idempotent.
         * @summary Unfollow User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserFollow(authorization: string, id: number, followerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UsersApiFp(configuration).deleteUserFollow(authorization, id, followerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, authorization?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return UsersApiFp(configuration).getUser(id, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User
         * @summary Get User
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCompositeAll(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserExt>> {
            return UsersApiFp(configuration).getUserCompositeAll(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns if you are following a user.
         * @summary Check Following (User/Admin Only)
         * @param {string} authorization 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollow(authorization: string, followerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return UsersApiFp(configuration).getUserFollow(authorization, followerId, options).then((request) => request(axios, basePath));
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return UsersApiFp(configuration).getUsers(authorization, name, following, banned, page, limit, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersBadges(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Badge>>> {
            return UsersApiFp(configuration).getUsersBadges(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} uid 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersLists(uid: number, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<any>>> {
            return UsersApiFp(configuration).getUsersLists(uid, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersReviews(id: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Review>>> {
            return UsersApiFp(configuration).getUsersReviews(id, page, limit, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
        /**
         * User List
         * @summary User List
         * @param {string} [authorization] 
         * @param {string} [name] 
         * @param {boolean} [following] 
         * @param {boolean} [banned] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [orderCol] 
         * @param {string} [orderDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersWithReviewsCount(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<OmitUserExtRatingsCountOrScreenshotCount_>>> {
            return UsersApiFp(configuration).getUsersWithReviewsCount(authorization, name, following, banned, page, limit, orderCol, orderDir, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a user. If a password is provided, then the old password must also be provided.
         * @summary Modify User (User/Admin Only)
         * @param {any} body 
         * @param {string} authorization 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUser(body: any, authorization: string, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return UsersApiFp(configuration).patchUser(body, authorization, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} uid 
         * @param {Permission} pid 
         * @param {EditUserPermissionsParam} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUsersPermissions(uid: number, pid: Permission, body?: EditUserPermissionsParam, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Permission>>> {
            return UsersApiFp(configuration).patchUsersPermissions(uid, pid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Register New User
         * @summary Register New User
         * @param {UserRegistration} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUser(body: UserRegistration, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return UsersApiFp(configuration).postUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a user to your following list. Idempotent.
         * @summary Follow User (User/Admin Only)
         * @param {string} authorization 
         * @param {number} id 
         * @param {number} followerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserFollow(authorization: string, id: number, followerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UsersApiFp(configuration).putUserFollow(authorization, id, followerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Removes a user from your following list. Idempotent.
     * @summary Unfollow User (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} followerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async deleteUserFollow(authorization: string, id: number, followerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UsersApiFp(this.configuration).deleteUserFollow(authorization, id, followerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUser(id: number, authorization?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return UsersApiFp(this.configuration).getUser(id, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get User
     * @summary Get User
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUserCompositeAll(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserExt>> {
        return UsersApiFp(this.configuration).getUserCompositeAll(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns if you are following a user.
     * @summary Check Following (User/Admin Only)
     * @param {string} authorization 
     * @param {number} followerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUserFollow(authorization: string, followerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return UsersApiFp(this.configuration).getUserFollow(authorization, followerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User List
     * @summary User List
     * @param {string} [authorization] 
     * @param {string} [name] 
     * @param {boolean} [following] 
     * @param {boolean} [banned] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUsers(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<any>>> {
        return UsersApiFp(this.configuration).getUsers(authorization, name, following, banned, page, limit, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUsersBadges(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Badge>>> {
        return UsersApiFp(this.configuration).getUsersBadges(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} uid 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUsersLists(uid: number, page?: number, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<any>>> {
        return UsersApiFp(this.configuration).getUsersLists(uid, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUsersReviews(id: number, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Review>>> {
        return UsersApiFp(this.configuration).getUsersReviews(id, page, limit, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User List
     * @summary User List
     * @param {string} [authorization] 
     * @param {string} [name] 
     * @param {boolean} [following] 
     * @param {boolean} [banned] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [orderCol] 
     * @param {string} [orderDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async getUsersWithReviewsCount(authorization?: string, name?: string, following?: boolean, banned?: boolean, page?: number, limit?: number, orderCol?: string, orderDir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<OmitUserExtRatingsCountOrScreenshotCount_>>> {
        return UsersApiFp(this.configuration).getUsersWithReviewsCount(authorization, name, following, banned, page, limit, orderCol, orderDir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates a user. If a password is provided, then the old password must also be provided.
     * @summary Modify User (User/Admin Only)
     * @param {any} body 
     * @param {string} authorization 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async patchUser(body: any, authorization: string, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return UsersApiFp(this.configuration).patchUser(body, authorization, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} uid 
     * @param {Permission} pid 
     * @param {EditUserPermissionsParam} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async patchUsersPermissions(uid: number, pid: Permission, body?: EditUserPermissionsParam, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Permission>>> {
        return UsersApiFp(this.configuration).patchUsersPermissions(uid, pid, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Register New User
     * @summary Register New User
     * @param {UserRegistration} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async postUser(body: UserRegistration, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return UsersApiFp(this.configuration).postUser(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds a user to your following list. Idempotent.
     * @summary Follow User (User/Admin Only)
     * @param {string} authorization 
     * @param {number} id 
     * @param {number} followerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public async putUserFollow(authorization: string, id: number, followerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UsersApiFp(this.configuration).putUserFollow(authorization, id, followerId, options).then((request) => request(this.axios, this.basePath));
    }
}
